#!/bin/bash
#==========================================#
#                 poshd                    #
#  https://github.com/ponyofshadows/poshd  #
#              version 0.1                 #
#==========================================#
set -e
export PO_PATH="$HOME/tmp/test/all"

. lib/object.sh
. lib/time.sh

# ----------------
## Strategies for Parsing Parameters
# 
# - Adjacent non-option parameters will be concatenated into one object
# |__ objects starting with "-e" or without preceding options -> (type:event, content, path, time, remove)
# |__ objects starting with "-p" -> (type:project, content, path, status, remove)
# |__ objects starting with "-f" -> (type:file, content, remove)
# |__ objects starting with "-b" or "-r" -> (type:disk, content, action)
# |__ objects starting with "-l" -> (type:keyword, content, time_from, time_to)
# - Objects call specfic functions
# |__ event -> update_event
# |__ project -> update_project
# |__ event & project -> link
# |__ disk -> backup || recover
# |__ keywords -> search
# - Some special options
# |__ "--init" 
# |__ "--debug"
# |__ "--rm"
# ----------------
current_content=""
declare -A current_object
current_object["type"]="event"
object_key_list=()
object_value_list=()
PO_DEBUG=""

if [[ "$#" == 0 ]]; then
  # equivalent to option "po -l"
  current_object["type"]="keywords"
  current_object["time_from"]="00010100"
  current_object["time_to"]="99123123"
  object_list+=("${current_object}")
else
  for arg in "$@"
  do
    if [[ ! "$arg" == -* ]]; then
      # 1. If current arg is not a option
      if [[ -n "$current_content" ]]; then
        current_content+="_$arg"
      else
        current_content="$arg"
      fi
    else  
      # 2. If current arg is a option
      # |__ 1) complete last object
      po_complete_object
      # |__ 2) Specific operations
      case "$arg" in
        -e*)
          current_object["type"]="event"
          current_object["time"]="${arg#*-e}"
          current_object["time"]="${current_object["time"]#*:}"
          current_object["time"]=$(po_date "${current_object["time"]}")
          ;;
        -p*)
          current_object["type"]="project"
          current_object["status"]="${arg#*-p}"
          current_object["status"]="${current_object["status"]#*:}"
          if [[ "${current_object["status"]}" == "rm" ]]; then
            current_object["remove"]="y"
          fi
          ;;
        -f)
          current_object["type"]="file"
          ;;
        -l*)
          current_object["type"]="keywords"
          RAW_PERIOD="${arg#*-l}"
          RAW_PERIOD="${RAW_PERIOD#*:}"
          FORMATTED_PERIOD=$(po_period "$RAW_PERIOD")
          current_object["time_from"]="${FORMATTED_PERIOD%%,*}"
          current_object["time_to"]="${FORMATTED_PERIOD#*,}"
          ;;
        --rm)
          current_object["remove"]="y"
          ;;
        -b)
          current_object["type"]="disk"
          current_object["action"]="backup"
          ;;
        -r)
          current_object["type"]="disk"
          current_object["action"]="recover"
          ;;
        --init)
          mkdir -p $PO_PATH/event
          mkdir -p $PO_PATH/proj
          mkdir -p $PO_PATH/.hidden_proj
          echo "The path to archive files is '$PO_PATH'"
          ;;
        --debug)
          if [[ -n "$PO_DEBUG" ]]; then
            PO_DEBUG=""
            echo "[DEBUG] debug off"
          else
            PO_DEBUG="on"
            echo "[DEBUG] debug on"
          fi
          ;;
      esac
    fi
    # DEBUG{
    #if [[ -n "$PO_DEBUG" ]]; then
     #echo "[DEBUG](po) \$arg=$arg" >&2
     #echo "[DEBUG](po) \$current_content=$current_content" >&2
    #fi
    # }DEBUG
  done
  # one more thing
  po_complete_object
fi
# DEBUG{
if [[ -n "$PO_DEBUG" ]]; then
  echo "[DEBUG](po) *** Object List ***"
  object_count=${#object_key_list[@]} 
  object_index=0
  while (( object_index < object_count )); do
    echo "--------$object_index"
    echo "${object_key_list[object_index]}"
    echo "${object_value_list[object_index]}"
    let object_index+=1
  done
  echo "--------"
fi
# }DEBUG

# ----------------
## Operate on Objects
# ----------------
declare -a current_object_keys
declare -a current_object_values

declare -a event_paths
declare -a proj_paths
declare -a file_paths

object_count=${#object_key_list[@]} 
object_index=0
while (( object_index < object_count )); do
  IFS=' ' read -r -a current_object_keys <<< "${object_key_list[object_index]}"
  IFS=' ' read -r -a current_object_values <<< "${object_value_list[object_index]}"
  let object_index+=1
  unset current_object
  declare -A current_object
  declare key_count=${#current_object_keys[@]}
  declare key_index=0
  while (( key_index < key_count )); do
    current_object["${current_object_keys[$key_index]}"]="${current_object_values[$key_index]}"
    let key_index+=1
  done
  # DEBUG{
  if [[ -n "$PO_DEBUG" ]]; then
    echo "[DEBUG](po) cur_key: ${!current_object[@]}"
    echo "[DEBUG](po) cur_value: ${current_object[@]}"
  fi
  # }DEBUG
  case "${current_object["type"]}" in 
    event)
      # Time
      if [[ "${current_object["time"]}" == "" ]]; then
        current_object["time"]=$(po_date "")
      fi
      # Does this event exist? 
      event_floders=( ${PO_PATH}/event/${current_object["time"]:0:6}[0-9][0-9]${current_object["content"]} )
      event_floder=${event_floders[0]}
      if [[ -d "$event_floder" ]]; then
        current_object["time"]=$(echo "$event_floder" | sed -n 's/.*event\/\([0-9]\{8\}\).*/\1/p')
        if [[ -n "${current_object["remove"]}" ]]; then
          rm -rf "$event_floder"
          echo "event deleted: ${current_object["time"]}${current_object["content"]}"
        else
          echo "event was created earlier today: ${current_object["time"]}${current_object["content"]}"
          if [[ -n "${current_object["path"]}" ]]; then
            mkdir -p "${event_floder}/${current_object["path"]}"
            event_paths+=("${event_path}/${current_object["path"]}")
          fi
        fi
      else 
        if [[ "${current_object["remove"]}" == "" ]]; then
          mkdir -p "${PO_PATH}/event/${current_object["time"]}${current_object["content"]}/${current_object["path"]}"
          echo "new event: ${current_object["time"]}${current_object["content"]}"
          if [[ -n "${current_object["path"]}" ]]; then
            event_paths+=("${PO_PATH}/event/${current_object["time"]}${current_object["content"]}/${current_object["path"]}")
          fi
        fi
      fi
      ;;
    project)
      proj_floder="${PO_PATH}/proj/${current_object["content"]}"
      hidden_proj_floder="${PO_PATH}/.hidden_proj/${current_object["content"]}"
      declare proj_current_status

      if [[ -d "$proj_floder" ]]; then
        proj_current_status="active"
        echo "project exists: ${current_object["content"]}"
        if [[ "${current_object["remove"]}" ==  "y" ]]; then
          rm -rf "$proj_floder"
          echo "deleted project: ${current_object["content"]}"
        elif [[ "${current_object[status]}" == "hide" ]]; then
          mv "$proj_floder" "$hidden_proj_floder"
          proj_current_status="hide"
          echo "hide project: ${current_object["content"]}"
        fi
      elif [[ -d "$hidden_proj_floder" ]]; then
        proj_current_status="hide"
        echo "hidden project exists: ${current_object["content"]}"
        if [[ "${current_object["remove"]}" ==  "y" ]]; then
          rm -rf "$hidden_proj_floder"
          echo "deleted hidden project: ${current_object["content"]}"
        elif [[ "${current_object[status]}" == "active" ]]; then
          mv "$hidden_proj_floder" "$proj_floder"
          proj_current_status="active"
          echo "active project: ${current_object["content"]}"
        fi
      elif [[ "${current_object["remove"]}" == "y" ]]; then
        proj_current_status=""
      elif [[ "${current_object["status"]}" == "hide" ]]; then
        mkdir -p "$hidden_proj_floder"
        proj_current_status="hide"
        echo "create hidden project: ${current_object["content"]}"
      else
        mkdir -p "$proj_floder"
        proj_current_status="active"
        echo "create project: ${current_object["content"]}"
      fi

      if [[ (-n "${current_object["path"]}") && ( -n "$proj_current_status") ]]; then
        if [[ "$proj_current_status" == "active" ]]; then
          mkdir -p "${proj_floder}/${current_object["path"]}"
          proj_paths+=("${proj_floder}/${current_object["path"]}")
        else
          mkdir -p "${hidden_proj_floder}/${current_object["path"]}"
          proj_paths+=("${hidden_proj_floder}/${current_object["path"]}")
        fi
      fi
      ;;
    file)
      :
      ;;
    keywords)
      :
      ;;
    disk)
      :
      ;;
  esac
done

