#!/bin/bash
#==========================================#
#                 poshd                    #
#  https://github.com/ponyofshadows/poshd  #
#              version 0.0                 #
#==========================================#
set -e
export PO_PATH="$HOME/tmp/test/all"

. lib/time.sh

# ----------------
## Segments
# ----------------
po_complete_object(){
  if [[ -n "$current_content" ]]; then
    if [[ "${current_object["type"]}" == "event" || "${current_object["type"]}" == "project" ]]; then
      # title
      current_object["content"]="${current_content%%/*}"
      # path
      if [[ "$current_content" == */* ]]; then
        current_object["path"]="${current_content#*/}"
      fi
    else
      current_object["content"]="$current_content"
    fi
  fi
  if [[ (-n "$current_content") || "${current_object[type]}" == "keywords" ]]; then
    current_content=""
    local object_count=${#object_key_list[@]}
    # DEBUG{
    #if [[ -n PO_DEBUG ]]; then
      #echo "[DEBUG](po) *** A New Object ***"
      #echo "[DEBUG](po) type: ${current_object["type"]}"
      #echo "[DEBUG](po) key: ${!current_object[@]}"
      #echo "[DEBUG](po) value: ${current_object[@]}"
      #echo "[DEBUG](po) object_count=$object_count"
    #fi
    # }DEBUG
    object_key_list[object_count]="${!current_object[@]}"
    object_value_list[object_count]="${current_object[@]}"
    unset current_object
    declare -g -A current_object
    current_object["type"]="event"
  fi
}

# ----------------
## Strategies for parsing parameters
# 
# - Adjacent non-option parameters will be concatenated into one object
# |__ objects starting with "-e" or without preceding options -> (type:event, content, path, time, remove)
# |__ objects starting with "-p" -> (type:project, content, path, status, remove)
# |__ objects starting with "-f" -> (type:file, content)
# |__ objects starting with "-b" or "-r" -> (type:disk, content, action)
# |__ objects starting with "-l" -> (type:keyword, content, time_from, time_to)
# - objects call specfic functions
# |__ event -> update_event
# |__ project -> update_project
# |__ event & project -> link
# |__ disk -> backup || recover
# |__ keywords -> search
#
# - some special options
# |__ "--init" 
# |__ "--debug"
# |__ "--rm"
# ----------------
current_content=""
declare -A current_object
current_object["type"]="event"
object_key_list=()
object_value_list=()
PO_DEBUG=""

if [[ "$#" == 0 ]]; then
  # equivalent to option "po -l"
  current_object["type"]="keywords"
  current_object["time_from"]="00010100"
  current_object["time_to"]="99123123"
  object_list+=("${current_object}")
else
  for arg in "$@"
  do
    if [[ ! "$arg" == -* ]]; then
      # 1. If current arg is not a option
      if [[ -n "$current_content" ]]; then
        current_content+="_$arg"
      else
        current_content="$arg"
      fi
    else  
      # 2. If current arg is a option
      # |__ 1) complete last object
      po_complete_object
      # |__ 2) Specific operations
      case "$arg" in
        -e*)
          current_object["type"]="event"
          current_object["time"]="${arg#*-e}"
          current_object["time"]="${current_object["time"]#*:}"
          current_object["time"]=$(po_date "${current_object["time"]}")
          ;;
        -p*)
          current_object["type"]="project"
          current_object["status"]="${arg#*-p}"
          current_object["status"]="${current_object["status"]#*:}"
          ;;
        -f)
          current_object["type"]="file"
          ;;
        -l*)
          current_object["type"]="keywords"
          RAW_PERIOD="${arg#*-l}"
          RAW_PERIOD="${RAW_PERIOD#*:}"
          FORMATTED_PERIOD=$(po_period "$RAW_PERIOD")
          current_object["time_from"]="${FORMATTED_PERIOD%%,*}"
          current_object["time_to"]="${FORMATTED_PERIOD#*,}"
          ;;
        --rm)
          current_object["remove"]="y"
          ;;
        -b)
          current_object["type"]="disk"
          current_object["action"]="backup"
          ;;
        -r)
          current_object["type"]="disk"
          current_object["action"]="recover"
          ;;
        --init)
          mkdir -p $PO_PATH/list
          mkdir -p $PO_PATH/proj
          mkdir -p $PO_PATH/.hidden_proj
          echo "The path to archive files is '$PO_PATH'"
          ;;
        --debug)
          if [[ -n "$PO_DEBUG" ]]; then
            PO_DEBUG=""
            echo "[DEBUG] debug off"
          else
            PO_DEBUG="on"
            echo "[DEBUG] debug on"
          fi
          ;;
      esac
    fi
    # DEBUG{
    #if [[ -n "$PO_DEBUG" ]]; then
     #echo "[DEBUG](po) \$arg=$arg" >&2
     #echo "[DEBUG](po) \$current_content=$current_content" >&2
    #fi
    # }DEBUG
  done
  # one more thing
  po_complete_object
fi
# DEBUG{
if [[ -n "$PO_DEBUG" ]]; then
  echo "[DEBUG](po) *** Object List ***"
  object_count=${#object_key_list[@]} 
  object_index=0
  while (( object_index < object_count )); do
    echo "--------$object_index"
    echo "${object_key_list[object_index]}"
    echo "${object_value_list[object_index]}"
    let object_index+=1
  done
  echo "--------"
fi
# }DEBUG
